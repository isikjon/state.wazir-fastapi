import os
import uuid
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
from PIL import Image, ImageOps
import cv2
import numpy as np
import aiofiles
from fastapi import UploadFile, HTTPException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class PanoramaProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º"""
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 100MB
    MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB –≤ –±–∞–π—Ç–∞—Ö
    SUPPORTED_FORMATS = {'.jpg', '.jpeg', '.png', '.tiff', '.bmp'}
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    UPLOAD_DIR = Path("uploads") / "panoramas"
    ORIGINAL_DIR = UPLOAD_DIR / "original"
    OPTIMIZED_DIR = UPLOAD_DIR / "optimized"
    PREVIEW_DIR = UPLOAD_DIR / "preview"
    THUMBNAIL_DIR = UPLOAD_DIR / "thumbnails"
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PanoramaProcessor")
        self._create_directories()
        logger.info("‚úÖ PanoramaProcessor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        logger.debug("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º...")
        directories = [
            self.ORIGINAL_DIR,
            self.OPTIMIZED_DIR, 
            self.PREVIEW_DIR,
            self.THUMBNAIL_DIR
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            logger.debug(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {directory}")
        
        logger.info("‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    def validate_file(self, file_path: Path, file_size: int = None) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–∞–Ω–æ—Ä–∞–º—ã"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª–∞: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not file_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return False
        
        logger.debug(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        actual_size = file_path.stat().st_size if file_size is None else file_size
        logger.debug(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {actual_size} –±–∞–π—Ç ({actual_size / (1024*1024):.2f} MB)")
        
        if actual_size > self.MAX_FILE_SIZE:
            logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {actual_size} > {self.MAX_FILE_SIZE}")
            return False
        
        logger.debug("‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_extension = file_path.suffix.lower()
        logger.debug(f"üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}")
        
        if file_extension not in self.SUPPORTED_FORMATS:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return False
        
        logger.debug("‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            logger.debug("üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            with Image.open(file_path) as img:
                width, height = img.size
                logger.debug(f"üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 2:1 –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º—ã)
                aspect_ratio = width / height
                logger.debug(f"ÔøΩÔøΩ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio:.2f}")
                
                if not (1.8 <= aspect_ratio <= 2.2):
                    logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~2:1)")
                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                
                logger.info("‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False
    
    def process_panorama(self, input_file: Path, property_id: int) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ ID: {property_id}")
        logger.info(f"üìÇ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ñ–∞–π–ª–æ–≤
            file_id = str(uuid.uuid4())
            logger.debug(f"üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω file_id: {file_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_extension = input_file.suffix.lower()
            base_filename = f"{property_id}_{file_id}"
            logger.debug(f"üìã –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {base_filename}")
            
            # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            original_path = self.ORIGINAL_DIR / f"{base_filename}_original{file_extension}"
            optimized_path = self.OPTIMIZED_DIR / f"{base_filename}_optimized.jpg"
            preview_path = self.PREVIEW_DIR / f"{base_filename}_preview.jpg"
            thumbnail_path = self.THUMBNAIL_DIR / f"{base_filename}_thumbnail.jpg"
            
            logger.debug(f"üìç –ü—É—Ç–∏ —Ñ–∞–π–ª–æ–≤:")
            logger.debug(f"  Original: {original_path}")
            logger.debug(f"  Optimized: {optimized_path}")
            logger.debug(f"  Preview: {preview_path}")
            logger.debug(f"  Thumbnail: {thumbnail_path}")
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            logger.info("üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            import shutil
            shutil.copy2(input_file, original_path)
            logger.info(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_path}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            with Image.open(input_file) as img:
                original_size = img.size
                logger.debug(f"üìê –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size}")
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                logger.info("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
                metadata = self._extract_metadata(img, input_file)
                logger.debug(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(metadata, indent=2, ensure_ascii=False)}")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                logger.info("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
                self._create_optimized_version(img, optimized_path)
                logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {optimized_path}")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
                logger.info("üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...")
                self._create_preview_version(img, preview_path)
                logger.info(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {preview_path}")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                logger.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã...")
                self._create_thumbnail_version(img, thumbnail_path)
                logger.info(f"‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {thumbnail_path}")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                'file_id': file_id,
                'original_url': f"/uploads/panoramas/original/{original_path.name}",
                'optimized_url': f"/uploads/panoramas/optimized/{optimized_path.name}",
                'preview_url': f"/uploads/panoramas/preview/{preview_path.name}",
                'thumbnail_url': f"/uploads/panoramas/thumbnails/{thumbnail_path.name}",
                'metadata': metadata,
                'uploaded_at': datetime.now()
            }
            
            logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.debug(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False, default=str)}")
            
            return result
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
    
    def _extract_metadata(self, img: Image.Image, file_path: Path) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        logger.debug("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            file_stats = file_path.stat()
            
            metadata = {
                'width': img.size[0],
                'height': img.size[1], 
                'format': img.format,
                'mode': img.mode,
                'file_size': file_stats.st_size,
                'aspect_ratio': round(img.size[0] / img.size[1], 2),
                'created_at': datetime.fromtimestamp(file_stats.st_ctime).isoformat(),
                'modified_at': datetime.fromtimestamp(file_stats.st_mtime).isoformat()
            }
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å EXIF –¥–∞–Ω–Ω—ã–µ
            if hasattr(img, '_getexif') and img._getexif():
                exif_data = img._getexif()
                logger.debug(f"üì∑ –ù–∞–π–¥–µ–Ω—ã EXIF –¥–∞–Ω–Ω—ã–µ: {len(exif_data)} –∑–∞–ø–∏—Å–µ–π")
                metadata['exif_available'] = True
            else:
                logger.debug("üì∑ EXIF –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                metadata['exif_available'] = False
            
            logger.debug("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            return metadata
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {'error': str(e)}
    
    def _create_optimized_version(self, img: Image.Image, output_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–∞–Ω–æ—Ä–∞–º—ã"""
        logger.debug("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
        
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            max_width = 4096
            
            if img.size[0] > max_width:
                logger.debug(f"üìè –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å {img.size[0]} –¥–æ {max_width} –ø–∏–∫—Å–µ–ª–µ–π –ø–æ —à–∏—Ä–∏–Ω–µ")
                ratio = max_width / img.size[0]
                new_height = int(img.size[1] * ratio)
                img_resized = img.resize((max_width, new_height), Image.Resampling.LANCZOS)
                logger.debug(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {img_resized.size}")
            else:
                logger.debug("üìè –†–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                img_resized = img
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img_resized.mode != 'RGB':
                logger.debug(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {img_resized.mode} –≤ RGB")
                img_resized = img_resized.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            logger.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
            img_resized.save(
                output_path,
                'JPEG',
                quality=85,
                optimize=True,
                progressive=True
            )
            
            logger.debug("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {str(e)}")
            raise
    
    def _create_preview_version(self, img: Image.Image, output_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤–µ—Ä—Å–∏–∏"""
        logger.debug("üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤–µ—Ä—Å–∏–∏...")
        
        try:
            # –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é
            preview_width = 1024
            ratio = preview_width / img.size[0]
            preview_height = int(img.size[1] * ratio)
            
            logger.debug(f"üìè –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é: {preview_width}x{preview_height}")
            
            img_preview = img.resize((preview_width, preview_height), Image.Resampling.LANCZOS)
            
            if img_preview.mode != 'RGB':
                img_preview = img_preview.convert('RGB')
            
            img_preview.save(
                output_path,
                'JPEG',
                quality=75,
                optimize=True
            )
            
            logger.debug("‚úÖ –ü—Ä–µ–≤—å—é –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}")
            raise
    
    def _create_thumbnail_version(self, img: Image.Image, output_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
        logger.debug("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã...")
        
        try:
            # –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            thumbnail_size = (400, 200)
            
            logger.debug(f"üìè –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {thumbnail_size}")
            
            img_thumbnail = img.resize(thumbnail_size, Image.Resampling.LANCZOS)
            
            if img_thumbnail.mode != 'RGB':
                img_thumbnail = img_thumbnail.convert('RGB')
            
            img_thumbnail.save(
                output_path,
                'JPEG',
                quality=70,
                optimize=True
            )
            
            logger.debug("‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {str(e)}")
            raise
    
    def delete_panorama_files(self, file_id: str, property_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã"""
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: file_id={file_id}, property_id={property_id}")
        
        try:
            base_filename = f"{property_id}_{file_id}"
            files_to_delete = []
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º file_id
            for directory in [self.ORIGINAL_DIR, self.OPTIMIZED_DIR, self.PREVIEW_DIR, self.THUMBNAIL_DIR]:
                for file_path in directory.glob(f"{base_filename}*"):
                    files_to_delete.append(file_path)
            
            logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(files_to_delete)}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            deleted_count = 0
            for file_path in files_to_delete:
                try:
                    if file_path.exists():
                        file_path.unlink()
                        deleted_count += 1
                        logger.debug(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    else:
                        logger.debug(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
            
            logger.info(f"üéØ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {deleted_count} —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
panorama_processor = PanoramaProcessor() 